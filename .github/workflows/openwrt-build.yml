name: Build OpenWrt X86_64 with Argon and iStoreOS Elements

on:
  workflow_dispatch:
    inputs:
      build_description:
        description: 'Release description'
        required: false
        default: 'OpenWrt X86_64 build with Argon theme and iStoreOS elements'

env:
  TZ: Asia/Shanghai
  UPLOAD_RELEASE: true  # 新增控制变量

jobs:
  build-openwrt:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86
            subtarget: 64
            profile: generic

    steps:
    # --- 源码准备阶段 ---
    - name: Checkout Lean's LEDE source
      uses: actions/checkout@v4
      with:
        repository: coolsnowwolf/lede
        ref: master
        path: lede

    - name: Checkout current repository
      uses: actions/checkout@v4
      with:
        path: current-repo

    # --- 环境配置阶段 ---
    - name: Copy config and scripts
      run: |
        cp current-repo/Lean.config lede/.config
        cp current-repo/customize.sh lede/
        chmod +x lede/customize.sh

    - name: Setup Build Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
        gettext git libncurses5-dev libssl-dev python3-setuptools rsync swig unzip zlib1g-dev \
        file wget llvm python3-pyelftools libpython3-dev aria2 jq qemu-utils ccache rename \
        libelf-dev device-tree-compiler libgmp3-dev libmpc-dev libfuse-dev

    # --- 编译准备阶段 ---
    - name: Update feeds
      working-directory: ./lede
      run: ./scripts/feeds update -a

    - name: Install feeds
      working-directory: ./lede
      run: ./scripts/feeds install -a

    - name: Run Customization Script
      working-directory: ./lede
      env:
        CUSTOM_IP: ${{ vars.CUSTOM_IP || '192.168.10.1' }}
      run: ./customize.sh

    - name: Verify Config
      working-directory: ./lede
      run: |
        [ ! -f .config ] && { echo ".config missing"; exit 1; }
        make defconfig

    # --- 编译阶段 ---
    - name: Download packages
      working-directory: ./lede
      run: |
        make download -j$(nproc)
        find dl -size -1024c -exec rm -f {} \;

    - name: Build Firmware
      working-directory: ./lede
      run: make -j$(($(nproc) + 1)) || make -j1 V=s

    # --- 发布准备阶段 ---
    - name: Prepare release assets
      id: prepare_assets
      working-directory: ./lede
      run: |
        mkdir -p ../firmware
        # 收集固件文件
        cp bin/targets/${{ matrix.target }}/${{ matrix.subtarget }}/*.img.gz ../firmware/ 2>/dev/null || true
        cp bin/targets/${{ matrix.target }}/${{ matrix.subtarget }}/*.vmdk ../firmware/ 2>/dev/null || true
        cp bin/targets/${{ matrix.target }}/${{ matrix.subtarget }}/*.iso ../firmware/ 2>/dev/null || true
        # 收集构建信息
        cp .config ../firmware/openwrt-config.txt
        cp bin/targets/${{ matrix.target }}/${{ matrix.subtarget }}/config.buildinfo ../firmware/build-info.txt
        # 生成版本信息
        echo "FIRMWARE=$PWD/../firmware" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    # --- 发布阶段 ---
    - name: Generate release info
      id: release_info
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "tag_name=$(date +'v%Y.%m.%d-%H%M')" >> $GITHUB_OUTPUT
        echo "name=OpenWrt Build $(date +'%Y-%m-%d %H:%M')" >> $GITHUB_OUTPUT
        # 生成 release body
        echo "## OpenWrt Build Details" > release.md
        echo "- Build Date: $(date)" >> release.md
        echo "- Target: ${{ matrix.target }}/${{ matrix.subtarget }}" >> release.md
        echo "- GitHub Run: [$GITHUB_RUN_ID](https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)" >> release.md
        echo "- Custom IP: ${{ vars.CUSTOM_IP || '192.168.10.1' }}" >> release.md
        echo ${{ github.event.inputs.build_description }} >> release.md
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      if: steps.release_info.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.release_info.outputs.tag_name }}
        release_name: ${{ steps.release_info.outputs.name }}
        body_file: release.md
        draft: false
        prerelease: false

    - name: Upload Firmware Assets
      uses: actions/upload-release-asset@v1
      if: steps.create_release.outputs.id && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.FIRMWARE }}/*
        asset_name: ${{ steps.release_info.outputs.tag_name }}_${{ matrix.target }}-${{ matrix.subtarget }}_$(basename %)

    # --- 清理阶段 ---
    - name: Clean old releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
