name: Auto Build OpenWrt X86_64

on:
  workflow_dispatch:
    inputs:
      build_description:
        description: 'Release description (optional)'
        required: false
        default: 'Auto-built OpenWrt with Argon theme and iStoreOS elements'

env:
  TZ: Asia/Shanghai
  UPLOAD_RELEASE: true
  KEEP_RELEASES: 3  # 保留最近3个发布

jobs:
  build-openwrt:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86
            subtarget: 64
            profile: generic

    steps:
    # --- 源码准备阶段 ---
    - name: Checkout Lean's LEDE source
      uses: actions/checkout@v4
      with:
        repository: coolsnowwolf/lede
        ref: master
        path: lede

    - name: Checkout current config
      uses: actions/checkout@v4
      with:
        path: config-repo

    # --- 环境配置阶段 ---
    - name: Setup Build Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
        gettext git libncurses5-dev libssl-dev python3-setuptools rsync swig unzip zlib1g-dev \
        file wget llvm python3-pyelftools libpython3-dev aria2 jq qemu-utils ccache rename \
        libelf-dev device-tree-compiler libgmp3-dev libmpc-dev libfuse-dev

    # --- 编译配置阶段 ---
    - name: Apply custom config
      run: |
        cp config-repo/Lean.config lede/.config
        cp config-repo/customize.sh lede/
        chmod +x lede/customize.sh

    - name: Update and install feeds
      working-directory: ./lede
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Run customization
      working-directory: ./lede
      env:
        CUSTOM_IP: ${{ vars.CUSTOM_IP || '192.168.10.1' }}
      run: ./customize.sh

    - name: Verify config
      working-directory: ./lede
      run: |
        [ -f .config ] || { echo "Error: Missing .config"; exit 1; }
        make defconfig

    # --- 编译阶段 ---
    - name: Download packages
      working-directory: ./lede
      run: |
        make download -j$(nproc)
        find dl -size -1024c -exec rm -f {} \;

    - name: Build firmware
      working-directory: ./lede
      run: make -j$(($(nproc) + 1)) || make -j1 V=s

    # --- 发布准备阶段 ---
    - name: Prepare release assets
      id: prepare_assets
      working-directory: ./lede
      run: |
        mkdir -p ../firmware
        # 收集所有固件文件（兼容不同扩展名）
        cp bin/targets/${{ matrix.target }}/${{ matrix.subtarget }}/*.{img.gz,vmdk,iso,bin} ../firmware/ 2>/dev/null || true
        # 收集构建信息
        cp .config ../firmware/config.txt
        cp bin/targets/${{ matrix.target }}/${{ matrix.subtarget }}/config.buildinfo ../firmware/buildinfo.txt
        # 设置绝对路径环境变量
        echo "FIRMWARE_PATH=$(realpath ../firmware)" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    # --- 自动发布阶段 ---
    - name: Generate release info
      id: release_info
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        # 自动生成时间戳标签 (格式: autobuild-YYYYMMDD-HHMM)
        echo "tag_name=autobuild-$(date +'%Y%m%d-%H%M')" >> $GITHUB_OUTPUT
        echo "release_name=AutoBuild $(date +'%Y-%m-%d %H:%M')" >> $GITHUB_OUTPUT
        
        # 生成Markdown格式的发布说明
        cat <<EOF > release.md
        ## OpenWrt Auto Build
        ### Build Details
        - **Date:** $(date)
        - **Target:** ${{ matrix.target }}/${{ matrix.subtarget }}
        - **Run ID:** [$GITHUB_RUN_ID](https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)
        - **Custom IP:** ${{ vars.CUSTOM_IP || '192.168.10.1' }}
        EOF
        
        # 添加自定义描述（如果存在）
        [ -n "${{ github.event.inputs.build_description }}" ] && echo "\n${{ github.event.inputs.build_description }}" >> release.md
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      if: steps.release_info.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.release_info.outputs.tag_name }}
        release_name: ${{ steps.release_info.outputs.release_name }}
        body_file: release.md
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      if: steps.create_release.outputs.id && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.FIRMWARE_PATH }}/*
        asset_name: ${{ steps.release_info.outputs.tag_name }}_$(basename %)
        asset_content_type: application/octet-stream  # 修复错误的关键参数

    # --- 清理阶段 ---
    - name: Clean old releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: ${{ env.KEEP_RELEASES }}
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
