name: Auto xiaomude521 OpenWrt X86_64

on:
  workflow_dispatch:
    inputs:
      build_description:
        description: 'Release description (optional)'
        required: false
        default: 'Auto-built OpenWrt with Argon theme and iStoreOS elements'

env:
  TZ: Asia/Shanghai
  UPLOAD_RELEASE: true
  KEEP_RELEASES: 3

jobs:
  build-openwrt:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86
            subtarget: 64
            profile: generic

    steps:
    # --- 源码准备阶段 ---
    - name: Checkout LEDE source
      uses: actions/checkout@v4
      with:
        repository: xiaomude521/lede
        ref: master
        path: lede

    - name: Checkout current config
      uses: actions/checkout@v4
      with:
        path: config-repo

    # --- 磁盘空间优化阶段 ---
    - name: Clean system disk space
      run: |
        # 清理系统缓存和临时文件
        sudo apt-get clean
        sudo rm -rf /var/lib/apt/lists/*
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /usr/share/swift
        # 检查磁盘空间
        df -h

    # --- 环境配置阶段 ---
    - name: Setup Build Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
        gettext git libncurses5-dev libssl-dev python3-setuptools rsync swig unzip zlib1g-dev \
        file wget llvm python3-pyelftools libpython3-dev aria2 jq qemu-utils ccache rename \
        libelf-dev device-tree-compiler libgmp3-dev libmpc-dev libfuse-dev dos2unix

    # --- 编译配置阶段 ---
    - name: Apply custom config
      run: |
        dos2unix config-repo/Lean.config
        cp config-repo/Lean.config lede/.config
        cp config-repo/customize.sh lede/
        chmod +x lede/customize.sh

    - name: Verify config file
      working-directory: ./lede
      run: |
        if [ ! -f .config ]; then
          echo "Error: .config file not found!"
          exit 1
        fi
        
        if ! grep -q "CONFIG_TARGET_x86_64" .config; then
          echo "Error: Invalid .config file!"
          head -n 10 .config
          exit 1
        fi
        
        echo "Config file appears to be valid"

    - name: Update and install feeds
      working-directory: ./lede
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Run customization
      working-directory: ./lede
      env:
        CUSTOM_IP: ${{ vars.CUSTOM_IP || '192.168.10.1' }}
      run: ./customize.sh

    - name: Verify config
      working-directory: ./lede
      run: |
        make defconfig

    # --- 编译阶段（优化磁盘使用）---
    - name: Clean before download
      working-directory: ./lede
      run: |
        # 清理可能存在的旧文件
        rm -rf build_dir/target-* || true
        rm -rf build_dir/toolchain-* || true
        df -h

    - name: Download packages with cleanup
      working-directory: ./lede
      run: |
        # 限制并行下载，减少内存和磁盘压力
        make download -j2
        # 删除小文件和不完整的下载
        find dl -size -1024c -delete
        find dl -name "*.tmp" -delete
        # 检查磁盘空间
        df -h

    - name: Build firmware with disk management
      working-directory: ./lede
      run: |
        # 使用更保守的并行任务数
        echo "Starting build with disk space optimization..."
        
        # 分阶段构建以减少峰值磁盘使用
        make -j2 tools/install
        make -j2 toolchain/install
        
        # 编译主要目标，定期检查磁盘空间
        while true; do
          # 检查磁盘空间
          DISK_SPACE=$(df . | awk 'NR==2 {print $4}')
          if [ "$DISK_SPACE" -lt 1000000 ]; then  # 如果小于1GB
            echo "Warning: Low disk space ($DISK_SPACE), cleaning..."
            # 删除一些中间文件
            find build_dir -name "*.o" -delete 2>/dev/null || true
            sync
          fi
          
          # 尝试继续编译
          if make -j2 V=s 2>&1 | tee build.log; then
            break
          else
            # 如果编译失败，检查是否是磁盘空间问题
            if grep -q "No space left on device" build.log; then
              echo "Disk space error detected, cleaning and retrying..."
              # 清理更多文件
              find build_dir -name "*.o" -delete 2>/dev/null || true
              find build_dir -name "*.d" -delete 2>/dev/null || true
              rm -rf tmp/ 2>/dev/null || true
              sync
              sleep 10
            else
              # 其他错误，退出
              exit 1
            fi
          fi
        done

    # --- 发布准备阶段 ---
    - name: Prepare release assets
      id: prepare_assets
      working-directory: ./lede
      run: |
        FIRMWARE_DIR="$(pwd)/../firmware"
        mkdir -p "$FIRMWARE_DIR"
        
        find bin/targets/${{ matrix.target }}/${{ matrix.subtarget }} \
          -maxdepth 1 \
          \( -name "*.img.gz" -o -name "*.vmdk" -o -name "*.iso" -o -name "*.bin" \) \
          -exec cp {} "$FIRMWARE_DIR/" \;
        
        cp .config "$FIRMWARE_DIR/config.txt"
        cp bin/targets/${{ matrix.target }}/${{ matrix.subtarget }}/config.buildinfo "$FIRMWARE_DIR/buildinfo.txt"
        
        if [ -z "$(ls -A "$FIRMWARE_DIR")" ]; then
          echo "Error: No firmware files found in $FIRMWARE_DIR!"
          exit 1
        fi
        
        echo "Found files:"
        ls -la "$FIRMWARE_DIR/"
        
        echo "FIRMWARE_PATH=$FIRMWARE_DIR" >> $GITHUB_ENV
        echo "prepare_assets_status=success" >> $GITHUB_ENV

    # --- 后续步骤保持不变 ---
    - name: Generate release info
      if: env.UPLOAD_RELEASE == 'true' && !cancelled() && env.prepare_assets_status == 'success'
      run: |
        echo "Release info will be generated based on workflow inputs"

    - name: Create GitHub Release
      if: env.UPLOAD_RELEASE == 'true' && !cancelled() && env.prepare_assets_status == 'success'
      id: create_release
      uses: ncipollo/release-action@v1
      with:
        tag: build-${{ github.run_id }}
        name: OpenWrt Build ${{ github.run_number }}
        body: ${{ inputs.build_description || 'Auto-built OpenWrt firmware' }}
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Firmware to Release
      if: env.UPLOAD_RELEASE == 'true' && !cancelled() && env.prepare_assets_status == 'success'
      run: |
        for file in ${{ env.FIRMWARE_PATH }}/*; do
          echo "Uploading $file"
          gh release upload build-${{ github.run_id }} "$file" --repo ${{ github.repository }}
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Install GitHub CLI
      if: env.UPLOAD_RELEASE == 'true' && !cancelled() && env.prepare_assets_status == 'success'
      run: |
        type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
        && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
        && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
        && sudo apt update \
        && sudo apt install gh -y

    - name: Clean Old Releases
      if: env.UPLOAD_RELEASE == 'true' && !cancelled() && env.prepare_assets_status == 'success'
      run: |
        keep_count=${{ env.KEEP_RELEASES }}
        all_releases=$(gh release list --repo ${{ github.repository }} --limit 100 --json tagName,createdAt --jq '.[] | "\(.tagName) \(.createdAt)"' | sort -k2 -r)
        total_releases=$(echo "$all_releases" | wc -l)
        
        if [ $total_releases -gt $keep_count ]; then
          delete_count=$((total_releases - keep_count))
          echo "Keeping $keep_count releases, deleting $delete_count oldest releases"
          releases_to_delete=$(echo "$all_releases" | tail -n $delete_count | awk '{print $1}')
          
          for release_tag in $releases_to_delete; do
            echo "Deleting release with tag: $release_tag"
            gh release delete "$release_tag" --repo ${{ github.repository }} --yes
          done
        else
          echo "No old releases to delete (current: $total_releases, keep: $keep_count)"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}